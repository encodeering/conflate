apply from: 'version.gradle'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'

buildscript {
    ext.kotlinversion = '1.1.2'
    ext.junitversion  = '1.0.0-M2'
    ext.dokkaversion  = '0.9.14'

    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:2.2.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinversion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitversion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaversion"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaversion"
    }
}

allprojects {

    repositories {
        jcenter ()
        mavenCentral ()
        mavenLocal ()
    }

}

subprojects {
    group 'com.encodeering.conflate'
    version versioncode ()

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
        project {
            languageLevel = 1.6
        }
    }

    publishing {
        publications {
            maven (MavenPublication) {
                pom.withXml {
                    asNode ().appendNode ("description", "$project.description")
                }
            }
        }
    }

    bintray {
        user = System.getenv ('BINTRAY_USER')
        key  = System.getenv ('BINTRAY_UKEY')
        publications = ['maven']
        pkg {
            repo = 'maven'
            name = rootProject.name
            licenses = ['Apache-2.0']
            labels   = ['redux']
            websiteUrl      = 'http://www.encodeering.com'
            issueTrackerUrl = 'https://github.com/encodeering/conflate/issues'
            vcsUrl          = 'https://github.com/encodeering/conflate'
            description     = 'An alternative redux implementation'
            version {
                name     = project.version
                vcsTag   = project.version
                released = new Date()
            }
        }
    }

    plugins.withType (JavaPlugin) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        dependencies {
            compile "org.slf4j:slf4j-api:1.7.22"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"
        }

        publishing {
            publications {
                maven (MavenPublication) {
                    artifactId jar.baseName
                    from components.java
                }
            }
        }
    }

    plugins.withType (com.android.build.gradle.LibraryPlugin) {
        dependencies {
            compile "org.slf4j:slf4j-api:1.7.22"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"

            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:0.5.0"
            testCompile "org.jetbrains.spek:spek-api:1.0.89"
            testCompile "org.jetbrains.spek:spek-junit-platform-engine:1.0.89"
            testCompile "org.mockito:mockito-core:2.7.5"
        }

        android {
            sourceSets {
                main.java.srcDirs += 'src/main/kotlin'
                test.java.srcDirs += 'src/test/kotlin'
            }
        }

        task jaronly (type: Jar, dependsOn : [build]) {
            from "$buildDir/intermediates/classes/release"
            archiveName "${project.name}.jar"
        }

        publishing {
            publications {
                maven (MavenPublication) {
                    artifact jaronly

                    pom.withXml {
                        def dependencies = asNode ().appendNode ('dependencies')

                        configurations.compile.allDependencies.each {
                            def dependency = dependencies.appendNode ('dependency')
                                dependency.appendNode ('groupId', it.group)
                                dependency.appendNode ('artifactId', it.name)
                                dependency.appendNode ('version', it.version)
                        }
                    }
                }
            }
        }
    }

    plugins.withType (org.junit.platform.gradle.plugin.JUnitPlatformPlugin) {
        dependencies {
            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:0.5.0"
            testCompile "org.jetbrains.spek:spek-api:1.0.89"
            testRuntime "org.jetbrains.spek:spek-junit-platform-engine:1.0.89"
            testCompile "org.mockito:mockito-core:2.7.5"
        }

        junitPlatform {
            platformVersion "$junitversion"
            engines {
                include 'spek'
            }
        }
    }

    plugins.withType (org.jetbrains.kotlin.gradle.plugin.KotlinPlugin) {
        sourceSets {
            main.kotlin.srcDirs += 'src/main/kotlin'
            test.kotlin.srcDirs += 'src/test/kotlin'
        }

        compileKotlin {
            kotlinOptions {
                apiVersion = '1.1'
                languageVersion = '1.1'
            }
        }
    }

    plugins.withType (org.jetbrains.dokka.gradle.DokkaPlugin) {
        dokka {
            moduleName = project.name
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
            sourceDirs = files ('src/main/kotlin')
            linkMapping {
                dir = "src/main/kotlin"
                url = "https://github.com/encodeering/conflate/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }

        task dokkajar (type: Jar, dependsOn: dokka) {
            classifier = 'javadoc'
            from dokka.outputDirectory
        }

        publishing {
            publications {
                maven (MavenPublication) {
                    artifact dokkajar
                }
            }
        }
    }

    plugins.withType (org.jetbrains.dokka.gradle.DokkaAndroidPlugin) {
        dokka {
            moduleName = project.name
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
            sourceDirs = files ('src/main/kotlin')
            linkMapping {
                dir = "src/main/kotlin"
                url = "https://github.com/encodeering/conflate/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }

        task dokkajar (type: Jar, dependsOn: dokka) {
            classifier = 'javadoc'
            from dokka.outputDirectory
        }

        publishing {
            publications {
                maven (MavenPublication) {
                    artifact dokkajar
                }
            }
        }
    }
}

repositories {
    maven {
        url "${System.getenv ("ANDROID_HOME")}/extras/android/m2repository/"
    }
}

configurations {
    dokkapath
    dokkapath.description = "dokka project classpath"
}

dependencies {
    subprojects.findAll { p -> dokkapath project (p.name) }

    dokkapath fileTree (include: ['*.jar'], dir: "${System.getenv("ANDROID_HOME")}/platforms/android-${project.ext["android.platform"]}/")
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
    moduleName = "$rootProject.name"
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "html"
    processConfigurations = ['dokkapath']
    sourceDirs = files (subprojects.findAll { ! it.name.contains ("test") }.collect {
        p ->
            def path = "modules/${p.name}/src/main/kotlin"

            linkMapping {
                dir = path
                url = "https://github.com/encodeering/conflate/blob/master/$path"
                suffix = "#L"
            }

            return "$rootProject.rootDir/$path"
    })
}

task wrapper (type: Wrapper) {
    gradleVersion = '3.1'
}