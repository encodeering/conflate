apply from: 'gradle/script/setup.gradle'
apply from: 'gradle/script/compilation.gradle'
apply from: 'gradle/script/documentation.gradle'
apply from: 'gradle/script/release.gradle'
apply from: 'gradle/script/test.gradle'
apply from: 'gradle/script/version.gradle'
apply plugin: 'idea'

buildscript {
    ext.kotlinversion  = project.ext['kotlin.version']
    ext.junitversion   = project.ext['junit.version']
    ext.slf4jversion   = project.ext['slf4j.version']
    ext.spekversion    = project.ext['spek.version']
    ext.mockitoversion = project.ext['mockito.version']
    ext.expektversion  = project.ext['expekt.version']
    ext.bintrayversion = project.ext['bintray.version']
    ext.dokkaversion   = project.ext['dokka.version']
    ext.androidgradleversion = project.ext['android.gradle.version']

    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidgradleversion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinversion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitversion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayversion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaversion"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaversion"
    }
}

allprojects {
    group 'com.encodeering.conflate'
    version versioncode ()

    repositories {
        jcenter ()
        mavenCentral ()
        mavenLocal ()
    }
}

subprojects {
    ifJava {
        dependencies {
            compile "org.slf4j:slf4j-api:$slf4jversion"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"
        }
    }

    ifAndroid {
        dependencies {
            compile "org.slf4j:slf4j-api:$slf4jversion"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"

            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:$expektversion"
            testCompile "org.jetbrains.spek:spek-api:$spekversion"
            testCompile "org.jetbrains.spek:spek-junit-platform-engine:$spekversion"
            testCompile "org.mockito:mockito-core:$mockitoversion"
        }
    }

    ifJUnit {
        dependencies {
            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:$expektversion"
            testCompile "org.jetbrains.spek:spek-api:$spekversion"
            testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekversion"
            testCompile "org.mockito:mockito-core:$mockitoversion"
        }
    }

    ifBintray {
        bintray {
            pkg {
                repo = 'maven'
                licenses = ['Apache-2.0']
                labels   = ['redux']
                websiteUrl      = 'http://www.encodeering.com'
                issueTrackerUrl = 'https://github.com/encodeering/conflate/issues'
                vcsUrl          = 'https://github.com/encodeering/conflate'
                description     = 'An alternative redux implementation'
            }
        }
    }

    ifDokka {
        dokka {
            linkMapping {
                dir = "src/main/kotlin"
                url = "https://github.com/encodeering/${rootProject.name}/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }
    }
}

ifDokka {
    dokka {
        subprojects.forEach { project ->
            linkMapping {
                dir = "modules/${project.name}/src/main/kotlin"
                url = "https://github.com/encodeering/${rootProject.name}/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = 1.6
    }
}

task clean {
    delete "$buildDir"
}

task wrapper (type: Wrapper) {
    gradleVersion = '3.1'
}