apply from: 'gradle/script/release.gradle'
apply from: 'gradle/script/version.gradle'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

buildscript {
    ext.kotlinversion  = project.ext['kotlin.version']
    ext.junitversion   = project.ext['junit.version']
    ext.bintrayversion = project.ext['bintray.version']
    ext.dokkaversion   = project.ext['dokka.version']
    ext.androidgradleversion = project.ext['android.gradle.version']

    repositories {
        jcenter ()
        mavenCentral ()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidgradleversion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinversion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitversion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayversion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaversion"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokkaversion"
    }
}

allprojects {
    group 'com.encodeering.conflate'
    version versioncode ()

    repositories {
        jcenter ()
        mavenCentral ()
        mavenLocal ()
    }
}

subprojects {
    apply plugin: 'jacoco'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
        project {
            languageLevel = 1.6
        }
    }

    plugins.withType (JavaPlugin) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        dependencies {
            compile "org.slf4j:slf4j-api:1.7.22"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"
        }
    }

    plugins.withType (com.android.build.gradle.LibraryPlugin) {
        dependencies {
            compile "org.slf4j:slf4j-api:1.7.22"
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinversion"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinversion"

            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:0.5.0"
            testCompile "org.jetbrains.spek:spek-api:1.1.2"
            testCompile "org.jetbrains.spek:spek-junit-platform-engine:1.1.2"
            testCompile "org.mockito:mockito-core:2.7.5"
        }

        android {
            sourceSets {
                main.java.srcDirs += 'src/main/kotlin'
                test.java.srcDirs += 'src/test/kotlin'
            }
        }

        afterEvaluate {
            task ("jacocoTestReport", dependsOn: "testReleaseUnitTest", type: JacocoReport, overwrite: true) {
                executionData files ("${buildDir}/jacoco/testReleaseUnitTest.exec")
                sourceDirectories = files ("$buildDir/src/main/kotlin")
                classDirectories  = fileTree (
                    dir: "$buildDir/intermediates/classes/release",
                    excludes: ['**/BuildConfig.*', '**/Manifest*.*']
                )

                reports {
                    xml.enabled = true
                    xml.destination "${buildDir}/reports/jacoco/report.xml"
                }
            }
        }
    }

    plugins.withType (org.junit.platform.gradle.plugin.JUnitPlatformPlugin) {
        dependencies {
            testCompile "org.junit.platform:junit-platform-runner:$junitversion"
            testCompile "com.winterbe:expekt:0.5.0"
            testCompile "org.jetbrains.spek:spek-api:1.1.2"
            testRuntime "org.jetbrains.spek:spek-junit-platform-engine:1.1.2"
            testCompile "org.mockito:mockito-core:2.7.5"
        }

        junitPlatform {
            platformVersion "$junitversion"
            filters {
                engines {
                    include 'spek'
                }
            }
        }
    }

    plugins.withType (JacocoPlugin) {
        afterEvaluate {
            tasks.whenTaskAdded {
                if (it.name == 'junitPlatformTest') {
                    def junitPlatformTestTask = it

                    jacoco {
                        applyTo junitPlatformTestTask
                    }

                    task ("jacocoTestReport", dependsOn: "test", type: JacocoReport, overwrite: true) {
                        executionData junitPlatformTestTask
                        sourceDirectories = files ("$buildDir/src/main/kotlin")
                        classDirectories  = files ("$buildDir/classes/main")

                        reports {
                            xml.enabled = true
                            xml.destination "${buildDir}/reports/jacoco/report.xml"
                        }
                    }
                }
            }
        }
    }

    plugins.withType (org.jetbrains.kotlin.gradle.plugin.KotlinPlugin) {
        sourceSets {
            main.kotlin.srcDirs += 'src/main/kotlin'
            test.kotlin.srcDirs += 'src/test/kotlin'
        }

        compileKotlin {
            kotlinOptions {
                apiVersion = '1.1'
                languageVersion = '1.1'
            }
        }
    }

    plugins.withType (org.jetbrains.dokka.gradle.DokkaPlugin) {
        dokka {
            moduleName = project.name
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
            sourceDirs = files ('src/main/kotlin')
            linkMapping {
                dir = "src/main/kotlin"
                url = "https://github.com/encodeering/conflate/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }
    }

    plugins.withType (org.jetbrains.dokka.gradle.DokkaAndroidPlugin) {
        dokka {
            moduleName = project.name
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
            sourceDirs = files ('src/main/kotlin')
            linkMapping {
                dir = "src/main/kotlin"
                url = "https://github.com/encodeering/conflate/blob/master/modules/${project.name}/src/main/kotlin"
                suffix = "#L"
            }
        }
    }
}

repositories {
    maven {
        url "${System.getenv ("ANDROID_HOME")}/extras/android/m2repository/"
    }
}

configurations {
    dokkapath
    dokkapath.description = "dokka project classpath"
}

dependencies {
    subprojects.findAll { p -> dokkapath project (p.name) }

    dokkapath fileTree (include: ['*.jar'], dir: "${System.getenv("ANDROID_HOME")}/platforms/android-${project.ext["android.platform"]}/")
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
    moduleName = "$rootProject.name"
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "html"
    processConfigurations = ['dokkapath']
    dokkaFatJar = "org.jetbrains.dokka:dokka-fatjar:$dokkaversion"
    sourceDirs = files (subprojects.findAll { ! it.name.contains ("test") }.collect {
        p ->
            def path = "modules/${p.name}/src/main/kotlin"

            linkMapping {
                dir = path
                url = "https://github.com/encodeering/conflate/blob/master/$path"
                suffix = "#L"
            }

            return "$rootProject.rootDir/$path"
    })
}

task coverage (type: JacocoReport) {
    executionData     = fileTree (project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    sourceDirectories = files (subprojects.collect {  "modules/$it.name/src/main/kotlin" })
    classDirectories  = files (subprojects.collect { ["modules/$it.name/build/classes/main", "modules/$it.name/build/intermediates/classes/release"] }.flatten ())

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
    }
}

coverage.dependsOn { subprojects*.jacocoTestReport }

task clean {
    delete "$buildDir"
}

task wrapper (type: Wrapper) {
    gradleVersion = '3.1'
}